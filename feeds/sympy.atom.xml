<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Marginally Stable - sympy</title><link href="/" rel="alternate"></link><link href="/feeds/sympy.atom.xml" rel="self"></link><id>/</id><updated>2014-09-12T20:31:00-05:00</updated><entry><title>Code Generation, and other things</title><link href="/codegen-and-things.html" rel="alternate"></link><published>2014-09-12T20:31:00-05:00</published><updated>2014-09-12T20:31:00-05:00</updated><author><name>Jim Crist</name></author><id>tag:None,2014-09-12:/codegen-and-things.html</id><summary type="html">&lt;p&gt;I gave a talk!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Long time, no post, but now I have news to share!&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;ufuncify&lt;/code&gt; stuff&lt;/h2&gt;
&lt;p&gt;First, I just merged a PR to make SymPy's &lt;code&gt;ufuncify&lt;/code&gt; create actual instances of
&lt;code&gt;numpy.ufunc&lt;/code&gt;. This function takes in a tuple of arguments, and an expression,
and returns a binary function that will broadcast (apply the function to each
argument in turn) the arguments through the function, returning an array. An
example would be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sympy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sympy.utilities.autowrap&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ufuncify&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;

&lt;span class="c1"&gt;# Create an example expression&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a, b, c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;

&lt;span class="c1"&gt;# Create a binary (compiled) function that broadcasts it&amp;#39;s arguments&lt;/span&gt;
&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ufuncify&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=md_output&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;96093086&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;11945988&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;05163344&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;81981085&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;71773336&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;

&lt;p&gt;Previously all broadcasting was done using hardcoded loops. These limited
arguments to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A single dimension array (only for the first argument)&lt;/li&gt;
&lt;li&gt;Scalars for the remaining arguments&lt;/li&gt;
&lt;li&gt;Floating point arguments (no type conversion)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, through the magic of &lt;a href="http://docs.scipy.org/doc/numpy/reference/ufuncs.html"&gt;&lt;code&gt;numpy.ufunc&lt;/code&gt;s&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;All&lt;/em&gt; arguments can be n-dimensional arrays&lt;/li&gt;
&lt;li&gt;Type conversion happens implicitly&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This makes this functionality &lt;em&gt;incredibly&lt;/em&gt; more useful. My next step is to add
the ability for multiple outputs, and a custom wrapper so that matrix calculations
can be broadcast as well. This should help with repeated computation of matrices,
which is something &lt;a href="http://www.moorepants.info/blog/fast-matrix-eval.html"&gt;Jason&lt;/a&gt;
needs for his work. This should be done (hopefully) by the end of next week.&lt;/p&gt;
&lt;h2&gt;Code Generation Talk&lt;/h2&gt;
&lt;p&gt;I gave a talk yesterday on code generation in SymPy for our local Python User
Group. Discusses the why and how of the code generation tool chains we
developed, and gives a little demo. Slides are
&lt;a href="https://speakerdeck.com/jcrist/generating-fast-and-correct-code-with-sympy"&gt;here&lt;/a&gt;,
and the corresponding demo &lt;a href="https://github.com/jcrist/codegen_talk"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;script async class="speakerdeck-embed"
data-id="51ea3e201c2901324611222c32eaed08" data-ratio="1.77777777777778"
src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;

&lt;hr&gt;
&lt;h2&gt;Other things...&lt;/h2&gt;
&lt;p&gt;School recently started back up. In an effort to keep myself on task, I've started
doing AIOs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Accomplishments: What did I do in the last week&lt;/li&gt;
&lt;li&gt;Issues: Things that came up and interfered with accomplishing things over the
  last week&lt;/li&gt;
&lt;li&gt;Objectives: Things I'd like to get done in the upcoming week. Note that these
  should be doable in ~1 week.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I've been &lt;a href="https://github.com/jcrist/AIOs"&gt;hosting them on github&lt;/a&gt; in an effort
to be open about my work, and update them every Friday. So far it seems to be a
good idea - at the end of each week I get a chance to reflect on what I did
that week, and what I plan to do over the next week. As a plus, my non-existant
internet readers get to hold me accountable to my to-do list :).&lt;/p&gt;</content><category term="sympy"></category><category term="ramblings"></category></entry></feed>